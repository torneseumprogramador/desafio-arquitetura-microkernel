package plugins.user;

import core.Plugin;
import core.DatabaseManager;
import core.HttpHandler;
import plugins.user.services.UserService;
import plugins.user.repositories.UserRepository;
import plugins.user.routes.UserRoutes;
import java.sql.Connection;
import java.util.List;
import java.util.Map;

/**
 * Plugin para gerenciamento de usu√°rios.
 * Demonstra um plugin autocontido com sistema de rotas declarativo.
 */
public class UserPlugin implements Plugin {
    private final UserService userService;
    private final UserRoutes userRoutes;

    public UserPlugin() {
        // Inicializar o plugin com suas depend√™ncias
        DatabaseManager dbManager = DatabaseManager.getInstance();
        Connection connection = dbManager.getConnection();
        UserRepository userRepository = new UserRepository(connection);
        this.userService = new UserService(userRepository);
        
        // Configurar sistema de rotas
        this.userRoutes = new UserRoutes(userService);
    }

    @Override
    public String getName() {
        return "User API Plugin - Gerenciamento de Usu√°rios via REST";
    }

    @Override
    public void execute() {
        System.out.println("=== Plugin de Usu√°rios Ativado ===");
        System.out.println("üì¶ Inicializando depend√™ncias do plugin:");
        System.out.println("   ‚úÖ UserRepository conectado ao banco");
        System.out.println("   ‚úÖ UserService inicializado");
        System.out.println("   ‚úÖ UserController configurado");
        System.out.println("   ‚úÖ RouteRegistry configurado");
        System.out.println("   ‚úÖ Rotas declarativas configuradas:");
        
        // Mostrar rotas configuradas
        userRoutes.getRouteDefinitions().forEach(route -> 
            System.out.println("      " + route.getMethod() + " " + route.getPath() + " ‚Üí " + route.getHandlerMethod())
        );
        
        System.out.println("   ‚úÖ Entidades carregadas");
        System.out.println("=== Plugin de Usu√°rios pronto para uso ===\n");
    }

    @Override
    public List<String> getAvailableRoutes() {
        return List.of(
            "GET  /api/users     - Listar todos os usu√°rios",
            "POST /api/users     - Criar novo usu√°rio",
            "GET  /api/users/{id} - Buscar usu√°rio por ID",
            "PUT  /api/users/{id} - Atualizar usu√°rio",
            "DELETE /api/users/{id} - Deletar usu√°rio"
        );
    }

    @Override
    public String getEmoji() {
        return "üë•";
    }

    @Override
    public Map<String, Object> getSwaggerInfo() {
        return Map.of(
            "name", "Usu√°rios",
            "description", "Gerenciamento de usu√°rios do sistema",
            "basePath", "/api/users",
            "version", "1.0.0"
        );
    }

    @Override
    public Map<String, Object> getOpenApiSchemas() {
        return Map.of(
            "User", Map.of(
                "type", "object",
                "properties", Map.of(
                    "id", Map.of("type", "integer"),
                    "name", Map.of("type", "string"),
                    "email", Map.of("type", "string"),
                    "password", Map.of("type", "string"),
                    "created_at", Map.of("type", "string", "format", "date-time")
                )
            )
        );
    }

    @Override
    public Map<String, Object> getOpenApiPaths() {
        return Map.of(
            "/api/users", Map.of(
                "get", Map.of(
                    "tags", List.of("Usu√°rios"),
                    "summary", "Listar todos os usu√°rios",
                    "description", "Retorna lista de todos os usu√°rios cadastrados",
                    "responses", createResponses("Lista de usu√°rios")
                ),
                "post", Map.of(
                    "tags", List.of("Usu√°rios"),
                    "summary", "Criar novo usu√°rio",
                    "description", "Cria um novo usu√°rio no sistema",
                    "requestBody", createRequestBody("User"),
                    "responses", createResponses("Usu√°rio criado")
                )
            ),
            "/api/users/{id}", Map.of(
                "get", Map.of(
                    "tags", List.of("Usu√°rios"),
                    "summary", "Buscar usu√°rio por ID",
                    "description", "Retorna um usu√°rio espec√≠fico por ID",
                    "parameters", createIdParameter(),
                    "responses", createResponses("Usu√°rio encontrado")
                ),
                "put", Map.of(
                    "tags", List.of("Usu√°rios"),
                    "summary", "Atualizar usu√°rio",
                    "description", "Atualiza um usu√°rio existente",
                    "parameters", createIdParameter(),
                    "requestBody", createRequestBody("User"),
                    "responses", createResponses("Usu√°rio atualizado")
                ),
                "delete", Map.of(
                    "tags", List.of("Usu√°rios"),
                    "summary", "Deletar usu√°rio",
                    "description", "Remove um usu√°rio do sistema",
                    "parameters", createIdParameter(),
                    "responses", createResponses("Usu√°rio deletado")
                )
            )
        );
    }

    @Override
    public List<String> getOpenApiTags() {
        return List.of("Usu√°rios");
    }

    private Map<String, Object> createResponses(String description) {
        return Map.of(
            "200", Map.of(
                "description", description,
                "content", Map.of(
                    "application/json", Map.of(
                        "schema", Map.of("type", "object")
                    )
                )
            ),
            "404", Map.of("description", "Recurso n√£o encontrado"),
            "400", Map.of("description", "Dados inv√°lidos")
        );
    }

    private Map<String, Object> createRequestBody(String schemaName) {
        return Map.of(
            "required", true,
            "content", Map.of(
                "application/json", Map.of(
                    "schema", Map.of("$ref", "#/components/schemas/" + schemaName)
                )
            )
        );
    }

    private List<Map<String, Object>> createIdParameter() {
        return List.of(Map.of(
            "name", "id",
            "in", "path",
            "required", true,
            "description", "ID do usu√°rio",
            "schema", Map.of("type", "integer")
        ));
    }

    /**
     * Retorna o HttpHandler do plugin.
     * @return HttpHandler configurado com o sistema de rotas
     */
    public HttpHandler getHttpHandler() {
        return userRoutes.getRouteRegistry()::handleRequest;
    }

    /**
     * Retorna o UserService para uso externo.
     * @return UserService do plugin
     */
    public UserService getUserService() {
        return userService;
    }
} 